apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cache-pod-restart
spec:
  params:
    - name: namespace
      description: "Namespace where LLM-D is deployed"
      default: "llm-d"
  steps:
    - name: restart-decode-pods
      image: bitnami/kubectl:latest
      script: |
        #!/bin/bash
        set -euo pipefail
        
        NS="$(params.namespace)"
        echo "üîÑ CACHE-AWARE ROUTING: Pod Restart Pipeline"
        echo "============================================"
        echo "Namespace: $NS"
        echo ""
        
        echo "=== Restarting Decode Pods for Fresh Metrics ==="
        
        echo "Current decode pods before restart:"
        kubectl get pods -n "$NS" -l 'llm-d.ai/role=decode' -o wide || true
        echo ""
        
        restarted=0
        
        # Try rollout restart for Deployments with the decode label
        DEPLOY_COUNT=$(kubectl get deploy -n "$NS" -l 'llm-d.ai/role=decode' --no-headers 2>/dev/null | wc -l | tr -d ' ')
        if [ "${DEPLOY_COUNT:-0}" -gt 0 ]; then
          echo "Restarting decode deployments ($DEPLOY_COUNT found)..."
          kubectl rollout restart deployment -n "$NS" -l llm-d.ai/role=decode
          kubectl rollout status deployment -n "$NS" -l llm-d.ai/role=decode --timeout=600s
          restarted=1
        fi
        
        # Try rollout restart for StatefulSets with the decode label
        STS_COUNT=$(kubectl get statefulset -n "$NS" -l 'llm-d.ai/role=decode' --no-headers 2>/dev/null | wc -l | tr -d ' ')
        if [ "${STS_COUNT:-0}" -gt 0 ]; then
          echo "Restarting decode statefulsets ($STS_COUNT found)..."
          kubectl rollout restart statefulset -n "$NS" -l llm-d.ai/role=decode
          kubectl rollout status statefulset -n "$NS" -l llm-d.ai/role=decode --timeout=600s
          restarted=1
        fi
        
        # If no controllers matched, delete pods directly
        if [ "$restarted" -eq 0 ]; then
          echo "No decode deployments/statefulsets found. Deleting decode pods directly..."
          PODS_BEFORE=$(kubectl get pods -n "$NS" -l 'llm-d.ai/role=decode' -o name || true)
          if [ -n "$PODS_BEFORE" ]; then
            kubectl delete -n "$NS" $PODS_BEFORE --wait=true
          else
            echo "No decode pods found to delete."
          fi
        fi
        
        echo ""
        echo "‚è≥ Waiting for new decode pods to become Ready..."
        # Wait for any decode pod to become Ready
        kubectl wait --for=condition=Ready pod -n "$NS" -l llm-d.ai/role=decode --timeout=900s
        
        echo ""
        echo "‚è≥ Waiting additional 60s for model load..."
        sleep 60
        
        echo ""
        echo "=== Fresh Decode Pods After Restart ==="
        DECODE_PODS=($(kubectl get pods -n "$NS" -l 'llm-d.ai/role=decode' --field-selector=status.phase=Running -o jsonpath='{.items[*].metadata.name}'))
        
        if [ ${#DECODE_PODS[@]} -eq 0 ]; then
            echo "‚ùå No running decode pods found after restart!"
            exit 1
        fi
        
        echo "Found ${#DECODE_PODS[@]} fresh decode pods:"
        for pod in "${DECODE_PODS[@]}"; do
            AGE=$(kubectl get pod "$pod" -n "$NS" -o jsonpath='{.status.startTime}')
            READY_STATUS=$(kubectl get pod "$pod" -n "$NS" -o jsonpath='{.status.containerStatuses[?(@.name=="vllm")].ready}')
            echo "  üì¶ $pod"
            echo "     Started: $AGE"
            echo "     vLLM Ready: $READY_STATUS"
        done
        
        echo ""
        echo "üéâ Pod restart complete - fresh pods with clean metrics ready!"
        echo ""
        echo "Next steps:"
        echo "1. Wait 2-3 minutes for models to fully load (if needed)"
        echo "2. Run the cache test pipeline: cache-hit-pipeline"
        echo ""

---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: cache-pod-restart-pipeline
spec:
  params:
    - name: namespace
      description: "Namespace where LLM-D is deployed"
      default: "llm-d"
  tasks:
    - name: restart-pods
      taskRef:
        name: cache-pod-restart
      params:
        - name: namespace
          value: "$(params.namespace)"
