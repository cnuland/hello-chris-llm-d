# Grafana ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana
  namespace: llm-d-monitoring
---
# Grafana Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: llm-d-monitoring
data:
  grafana.ini: |
    [auth.anonymous]
    enabled = true
    org_role = Viewer
    [auth]
    disable_login_form = false
    [security]
    admin_user = admin
    admin_password = admin
    [paths]
    data = /var/lib/grafana
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
---
# Grafana Datasource Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: llm-d-monitoring
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        uid: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true
        editable: true
        jsonData:
          timeInterval: 5s
          queryTimeout: 60s
          httpMethod: POST
        secureJsonData: {}
---
# Grafana Dashboard Provisioning Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: llm-d-monitoring
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards
---
# LLM-D Performance Dashboard
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-llm-performance
  namespace: llm-d-monitoring
  labels:
    grafana_dashboard: "1"
data:
  llm-performance-dashboard.json: |
    {
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": {
              "type": "grafana",
              "uid": "-- Grafana --"
            },
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "fiscalYearStartMonth": 0,
      "graphTooltip": 0,
      "id": null,
      "links": [],
      "liveNow": false,
      "panels": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "description": "**Time to First Token (TTFT)** measures the critical latency from when a request is received until the first token is generated. This is the most important user-facing latency metric as it determines how quickly users see the initial response. Lower values indicate better user experience.\n\n• **P50**: 50% of requests complete faster than this time\n• **P95**: 95% of requests complete faster than this time (SLA threshold)\n• **P99**: 99% of requests complete faster than this time (tail latency)",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "Time (seconds)",
                "axisPlacement": "auto",
                "drawStyle": "line",
                "fillOpacity": 10,
                "gradientMode": "none",
                "lineWidth": 2,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "yellow",
                    "value": 0.5
                  },
                  {
                    "color": "red",
                    "value": 1.0
                  }
                ]
              },
              "unit": "s"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 0
          },
          "id": 1,
          "options": {
            "legend": {
              "calcs": ["lastNotNull", "mean"],
              "displayMode": "table",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "prometheus"
              },
              "expr": "histogram_quantile(0.50, rate(vllm:time_to_first_token_seconds_bucket[5m]))",
              "interval": "",
              "legendFormat": "P50 TTFT",
              "refId": "A"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "prometheus"
              },
              "expr": "histogram_quantile(0.95, rate(vllm:time_to_first_token_seconds_bucket[5m]))",
              "interval": "",
              "legendFormat": "P95 TTFT",
              "refId": "B"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "prometheus"
              },
              "expr": "histogram_quantile(0.99, rate(vllm:time_to_first_token_seconds_bucket[5m]))",
              "interval": "",
              "legendFormat": "P99 TTFT",
              "refId": "C"
            }
          ],
          "title": "Time to First Token (TTFT)",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "description": "**KV Cache Hit Rate** measures the effectiveness of the prefix cache in reusing previously computed attention keys and values. Higher hit rates (>60%) indicate better cache efficiency and reduced computation overhead.\n\n• **Red (0-30%)**: Poor cache efficiency\n• **Yellow (30-60%)**: Moderate efficiency\n• **Green (60%+)**: Good cache efficiency",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "mappings": [],
              "max": 1,
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "red",
                    "value": null
                  },
                  {
                    "color": "yellow",
                    "value": 0.3
                  },
                  {
                    "color": "green",
                    "value": 0.6
                  }
                ]
              },
              "unit": "percentunit"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 6,
            "x": 12,
            "y": 0
          },
          "id": 4,
          "options": {
            "orientation": "auto",
            "reduceOptions": {
              "calcs": ["lastNotNull"],
              "fields": "",
              "values": false
            },
            "showThresholdLabels": false,
            "showThresholdMarkers": true
          },
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "prometheus"
              },
              "expr": "sum(vllm:gpu_prefix_cache_hits_total) / sum(vllm:gpu_prefix_cache_queries_total)",
              "interval": "",
              "legendFormat": "Overall Cache Hit Rate",
              "refId": "A"
            }
          ],
          "title": "KV Cache Hit Rate",
          "type": "gauge"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "description": "**Per-Pod Cache Metrics** shows cache performance for each individual decode pod. This helps identify which pods are receiving traffic and their cache efficiency. Useful for troubleshooting cache-aware routing.",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "mappings": [],
              "max": 1,
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "red",
                    "value": null
                  },
                  {
                    "color": "yellow",
                    "value": 0.3
                  },
                  {
                    "color": "green",
                    "value": 0.6
                  }
                ]
              },
              "unit": "percentunit"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 8
          },
          "id": 9,
          "options": {
            "displayMode": "basic",
            "orientation": "horizontal",
            "reduceOptions": {
              "calcs": ["lastNotNull"],
              "fields": "",
              "values": false
            },
            "showUnfilled": true
          },
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "prometheus"
              },
              "expr": "vllm:gpu_prefix_cache_hits_total / vllm:gpu_prefix_cache_queries_total",
              "interval": "",
              "legendFormat": "Pod {{instance}}",
              "refId": "A"
            }
          ],
          "title": "Per-Pod Cache Hit Rates",
          "type": "bargauge"
        }
      ],
      "refresh": "5s",
      "schemaVersion": 36,
      "style": "dark",
      "tags": [
        "llm",
        "vllm",
        "performance",
        "inference",
        "llm-d"
      ],
      "templating": {
        "list": [
          {
            "current": {
              "selected": false,
              "text": "meta-llama/Llama-3.2-1B",
              "value": "meta-llama/Llama-3.2-1B"
            },
            "datasource": {
              "type": "prometheus",
              "uid": "prometheus"
            },
            "definition": "label_values(vllm:num_requests_running, model_name)",
            "hide": 0,
            "includeAll": false,
            "multi": false,
            "name": "model",
            "options": [],
            "query": {
              "query": "label_values(vllm:num_requests_running, model_name)",
              "refId": "StandardVariableQuery"
            },
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "type": "query"
          }
        ]
      },
      "time": {
        "from": "now-15m",
        "to": "now"
      },
      "timepicker": {},
      "timezone": "",
      "title": "LLM-D Performance Dashboard",
      "uid": "llm-performance",
      "version": 2,
      "weekStart": ""
    }
---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: llm-d-monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      serviceAccountName: grafana
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        volumeMounts:
        - name: grafana-config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboard-config
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
      volumes:
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboard-config
        configMap:
          name: grafana-dashboards-config
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboard-llm-performance
---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: llm-d-monitoring
spec:
  ports:
  - port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    app: grafana
---
# Grafana OpenShift Route
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: grafana-secure
  namespace: llm-d-monitoring
spec:
  host: grafana-llm-d-monitoring.apps.rhoai-cluster.qhxt.p1.openshiftapps.com
  tls:
    termination: edge
  to:
    kind: Service
    name: grafana
    weight: 100
  wildcardPolicy: None
