# Prometheus ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: llm-d-monitoring
---
# Prometheus ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-llm-d-monitoring
rules:
- apiGroups: [""]
  resources:
  - nodes
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["get"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
# Prometheus ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-llm-d-monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-llm-d-monitoring
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: llm-d-monitoring
---
# Prometheus Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: llm-d-monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 5s
      evaluation_interval: 5s
      external_labels:
        cluster: 'llm-d'
        
    rule_files:
      - "/etc/prometheus/rules/*.yml"
      
    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']
      
    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
      - role: endpoints
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https
        
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
        
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - llm-d
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?:\\d+)?;(\\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
        
    - job_name: 'llm-d-scheduler'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - llm-d
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: llm-d-scheduler
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics
        
    - job_name: 'vllm-instances'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - llm-d
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_label_llm_d_ai_model]
        action: keep
        regex: 'llama-.*'
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: vllm
      - source_labels: [__address__]
        action: replace
        regex: '([^:]+):.*'
        replacement: '${1}:8000'
        target_label: __address__
      - source_labels: [__meta_kubernetes_service_label_llm_d_ai_role]
        action: replace
        target_label: vllm_role
      - source_labels: [__meta_kubernetes_service_label_llm_d_ai_model]
        action: replace
        target_label: vllm_model
        
    - job_name: 'envoy-gateway'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - envoy-gateway-system
          - llm-d
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: 'envoy-.*|.*gateway.*'
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: 'metrics|admin'
        
    - job_name: 'gateway-api-inference-extension'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - llm-d
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: '.*-epp-service'
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: 'metrics'
      - source_labels: [__address__]
        action: replace
        regex: '([^:]+):.*'
        replacement: '${1}:9090'
        target_label: __address__
      - source_labels: [__meta_kubernetes_service_label_llm_d_ai_epp]
        action: replace
        target_label: inference_extension
        
    - job_name: 'llm-d-components'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - llm-d
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?:\\d+)?;(\\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name

  inference_rules.yml: |
    groups:
    - name: inference.rules
      rules:
      - alert: HighInferenceLatency
        expr: histogram_quantile(0.95, rate(vllm_request_duration_seconds_bucket[5m])) > 10
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: High inference latency detected
          description: "95th percentile latency is {{ $value }}s for {{ $labels.instance }}"
          
      - alert: LowCacheHitRate
        expr: rate(vllm_cache_hit_total[5m]) / rate(vllm_cache_total[5m]) < 0.3
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: Low cache hit rate
          description: "Cache hit rate is {{ $value | humanizePercentage }} for {{ $labels.instance }}"
          
      - alert: GPUMemoryHigh
        expr: vllm_gpu_memory_usage_bytes / vllm_gpu_memory_total_bytes > 0.9
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: GPU memory usage is high
          description: "GPU memory usage is {{ $value | humanizePercentage }} on {{ $labels.instance }}"
          
      - alert: InferenceQueueLengthHigh
        expr: vllm_queue_length > 20
        for: 1m
        labels:
          severity: warning
        annotations:
          summary: High inference queue length
          description: "Queue length is {{ $value }} on {{ $labels.instance }}"
          
      - alert: SchedulerUnhealthy
        expr: up{job="llm-d-scheduler"} == 0
        for: 30s
        labels:
          severity: critical
        annotations:
          summary: llm-d scheduler is down
          description: "llm-d scheduler instance {{ $labels.instance }} is not responding"
---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: llm-d-monitoring
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus/
        - --web.console.libraries=/etc/prometheus/console_libraries
        - --web.console.templates=/etc/prometheus/consoles
        - --storage.tsdb.retention.time=7d
        - --web.enable-lifecycle
        - --web.enable-admin-api
        ports:
        - containerPort: 9090
        resources:
          requests:
            cpu: "1"
            memory: "2Gi"
          limits:
            cpu: "2"
            memory: "4Gi"
        volumeMounts:
        - name: prometheus-config-volume
          mountPath: /etc/prometheus/
        - name: prometheus-storage-volume
          mountPath: /prometheus/
        - name: prometheus-rules-volume
          mountPath: /etc/prometheus/rules/
      volumes:
      - name: prometheus-config-volume
        configMap:
          defaultMode: 420
          name: prometheus-config
      - name: prometheus-storage-volume
        emptyDir:
          sizeLimit: 20Gi
      - name: prometheus-rules-volume
        configMap:
          defaultMode: 420
          name: prometheus-config
          items:
          - key: inference_rules.yml
            path: inference_rules.yml
---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: llm-d-monitoring
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: web
  selector:
    app: prometheus
